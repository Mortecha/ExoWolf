[gd_resource type="ShaderMaterial" load_steps=4 format=2]

[ext_resource path="res://shaders/OceanTextureTestB.png" type="Texture" id=1]
[ext_resource path="res://shaders/Water_N_B_Test.png" type="Texture" id=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;

uniform vec4 wave_a = vec4(0.5, 0.5, 0.125, 1.5); // xy = amplitude, zw = frequency
uniform vec4 wave_b = vec4(0.5, 0.3, 0.125, 0.75);
uniform vec4 wave_c = vec4(0.5, 0.565, 0.25, 0.45);

uniform vec2 wave_a_time_factor = vec2(-0.25, 0.5);
uniform vec2 wave_b_time_factor = vec2(-0.25, -0.5);
uniform vec2 wave_c_time_factor = vec2(0.55, -0.25);

uniform sampler2D texture_map : hint_albedo;
uniform sampler2D normal_map : hint_normal;

float height(vec4 wave, vec2 pos, float time, vec2 time_factor) {
	return (wave.x * sin(pos.x * wave.z + time * time_factor.x)) + (wave.y * sin(pos.y * wave.w + time * time_factor.y));
}

void vertex() {
	VERTEX.y = height(wave_a, VERTEX.xz, TIME, wave_a_time_factor);
	VERTEX.y += height(wave_b, VERTEX.xz, TIME, wave_b_time_factor);
	VERTEX.y += height(wave_c, VERTEX.xz, TIME, wave_c_time_factor);
	
	TANGENT = normalize(vec3(0.0, height(wave_a, VERTEX.xz + vec2(0.0, 0.2), TIME, wave_a_time_factor) - height(wave_a, VERTEX.xz + vec2(0.0, -0.2), TIME, wave_a_time_factor), 0.4));
	TANGENT += normalize(vec3(0.0, height(wave_b, VERTEX.xz + vec2(0.0, 0.2), TIME, wave_b_time_factor) - height(wave_b, VERTEX.xz + vec2(0.0, -0.2), TIME, wave_b_time_factor), 0.4));
	TANGENT += normalize(vec3(0.0, height(wave_c, VERTEX.xz + vec2(0.0, 0.2), TIME, wave_c_time_factor) - height(wave_c, VERTEX.xz + vec2(0.0, -0.2), TIME, wave_c_time_factor), 0.4));
	
	BINORMAL = normalize(vec3(0.4, height(wave_a, VERTEX.xz + vec2(0.2, 0.0), TIME, wave_a_time_factor) - height(wave_a, VERTEX.xz + vec2(-0.2, 0.0), TIME, wave_a_time_factor), 0.0));
	BINORMAL += normalize(vec3(0.4, height(wave_b, VERTEX.xz + vec2(0.2, 0.0), TIME, wave_b_time_factor) - height(wave_b, VERTEX.xz + vec2(-0.2, 0.0), TIME, wave_b_time_factor), 0.0));
	BINORMAL += normalize(vec3(0.4, height(wave_c, VERTEX.xz + vec2(0.2, 0.0), TIME, wave_c_time_factor) - height(wave_c, VERTEX.xz + vec2(-0.2, 0.0), TIME, wave_c_time_factor), 0.0));
	
	NORMAL = cross(TANGENT, BINORMAL);
}

void fragment() {
	ALBEDO = texture(texture_map, UV).rgb;
	NORMALMAP = texture(normal_map, UV).rgb;
	METALLIC = 0.25;
	ROUGHNESS = 0.025;
}"

[resource]
shader = SubResource( 1 )
shader_param/wave_a = Plane( 0.5, 0.5, 0.125, 3 )
shader_param/wave_b = Plane( 0.5, 0.3, 0.125, 0.75 )
shader_param/wave_c = Plane( 0.5, 0.565, 0.25, 0.25 )
shader_param/wave_a_time_factor = Vector2( -0.25, 0.5 )
shader_param/wave_b_time_factor = Vector2( -0.25, -0.5 )
shader_param/wave_c_time_factor = Vector2( 0.55, -0.25 )
shader_param/texture_map = ExtResource( 1 )
shader_param/normal_map = ExtResource( 2 )
