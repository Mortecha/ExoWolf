[gd_resource type="ShaderMaterial" load_steps=4 format=2]

[ext_resource path="res://shaders/ocean/OceanTextureTestB.png" type="Texture" id=1]
[ext_resource path="res://shaders/ocean/Water_N_B_Test.png" type="Texture" id=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;

uniform sampler2D texture_map : hint_albedo;
uniform vec2 texture_scale = vec2(8.0, 4.0);
uniform sampler2D normal_map : hint_normal;

uniform vec2 amplitude = vec2(0.2, 0.1);
uniform vec2 frequency = vec2(3.0, 2.5);
uniform vec2 time_factor = vec2(2.0, 3.0);

// Wave settings:
uniform float wave_speed = 0.5; // Speed scale for the waves
uniform vec4 wave_a = vec4(1.0, 1.0, 0.35, 3.0); // xy = Direction, z = Steepness, w = Length
uniform vec4 wave_b = vec4(1.0, 0.6, 0.30, 1.55); // xy = Direction, z = Steepness, w = Length
uniform vec4 wave_c = vec4(1.0, 1.3, 0.25, 0.9); // xy = Direction, z = Steepness, w = Length

// Vertex -> Fragment:
varying float vertex_height; // Height of the water surface
varying vec3 vertex_normal; // Vertex normal -> Needed for refraction calculation
varying vec3 vertex_binormal; // Vertex binormal -> Needed for refraction calculation
varying vec3 vertex_tangent; // Vertex tangent -> Needed for refraction calculation

float height(vec4 parameter, vec2 pos, float time) {
	return (parameter.z * sin(pos.x * parameter.w + time * time_factor.x)) + (parameter.z * sin(pos.y * parameter.w + time * time_factor.y));
}

// Wave function:
vec4 wave(vec4 parameter, vec2 position, float time, inout vec3 tangent, inout vec3 binormal) {
	float wave_steepness = parameter.z;
	float wave_length = parameter.w;

	float k = 2.0 * 3.14159265359 / wave_length;
	float c = sqrt(9.8 / k);
	vec2 d = normalize(parameter.xy);
	float f = k * (dot(d, position) - c * time);
	float a = wave_steepness / k;

	tangent = normalize(vec3(0.0, height(parameter, position + vec2(0.0, 0.2), TIME) - height(parameter, position + vec2(0.0, -0.2), TIME), 0.4));
	binormal = normalize(vec3(0.4, height(parameter, position + vec2(0.2, 0.0), TIME) - height(parameter, position + vec2(-0.2, 0.0), TIME), 0.0));

	return vec4(d.x * (a * cos(f)), a * sin(f) * 0.25, d.y * (a * cos(f)), 0.0);
}

void vertex() {
	float time = TIME * wave_speed;
	vec4 vertex = vec4(VERTEX, 1.0);
	vec3 vertex_position = (WORLD_MATRIX * vertex).xyz;
	vertex_tangent = vec3(0.0, 0.0, 0.0);
	vertex_binormal = vec3(0.0, 0.0, 0.0);

	vertex += wave(wave_a, vertex_position.xz, time, vertex_tangent, vertex_binormal);
	vertex += wave(wave_b, vertex_position.xz, time, vertex_tangent, vertex_binormal);
	vertex += wave(wave_c, vertex_position.xz, time, vertex_tangent, vertex_binormal);
	
	VERTEX = vertex.xyz;
	NORMAL = cross(TANGENT, BINORMAL);
}

void fragment() {
	ALBEDO = texture(texture_map, UV * texture_scale).rgb;
	NORMALMAP = texture(normal_map, UV * texture_scale).rgb;
	METALLIC = 0.5;
	ROUGHNESS = 0.025;
}
"

[resource]
shader = SubResource( 1 )
shader_param/texture_scale = Vector2( 1, 1 )
shader_param/amplitude = Vector2( 0.5, 0.05 )
shader_param/frequency = Vector2( 3, 3 )
shader_param/time_factor = Vector2( 0.5, 0.75 )
shader_param/wave_speed = 0.5
shader_param/wave_a = Plane( 4, 2, 0.35, 5 )
shader_param/wave_b = Plane( 5, 0.6, 0.3, 6 )
shader_param/wave_c = Plane( 7, 3, 0.25, 10 )
shader_param/texture_map = ExtResource( 1 )
shader_param/normal_map = ExtResource( 2 )
